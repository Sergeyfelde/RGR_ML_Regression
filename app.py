import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import os
from catboost import CatBoostRegressor
from PIL import Image
from sklearn.ensemble import GradientBoostingRegressor, BaggingRegressor, StackingRegressor
from sklearn.linear_model import ElasticNet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ML Models Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_models():
    models = {}
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML1 (ElasticNet)
    try:
        models['ElasticNet'] = pickle.load(open('models/model_ml1.pkl', 'rb'))
    except:
        st.warning("–ú–æ–¥–µ–ª—å ElasticNet –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML2 (GradientBoosting)
    try:
        if 'model_ml2.pkl' in os.listdir('models'):
            file_size = os.path.getsize('models/model_ml2.pkl')
            st.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ model_ml2.pkl: {file_size} –±–∞–π—Ç")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            try:
                import joblib
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º joblib, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω –ø—Ä–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
                models['GradientBoosting'] = joblib.load('models/model_ml2.pkl')
            except Exception as joblib_error:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ joblib: {str(joblib_error)}")
                
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ pickle
                try:
                    with open('models/model_ml2.pkl', 'rb') as f:
                        models['GradientBoosting'] = pickle.load(f)
                except Exception as pickle_error:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ pickle: {str(pickle_error)}")
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
                    st.warning("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ GradientBoosting...")
                    from sklearn.ensemble import GradientBoostingRegressor
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –∏ –æ–±—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
                    try:
                        data = pd.read_csv('data/EDA_regression.csv')
                        X = data.drop('price', axis=1)
                        y = data['price']
                        
                        # –û–±—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
                        simple_gb = GradientBoostingRegressor(n_estimators=50, random_state=42)
                        simple_gb.fit(X, y)
                        models['GradientBoosting'] = simple_gb
                        st.success("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å GradientBoosting")
                    except Exception as train_error:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å: {str(train_error)}")
        else:
            st.warning("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ GradientBoosting (model_ml2.pkl) –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ GradientBoosting: {str(e)}")
        import traceback
        st.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML3 (CatBoost)
    try:
        cb_model = CatBoostRegressor()
        cb_model.load_model('models/model_ml3.cbm')
        models['CatBoost'] = cb_model
    except:
        st.warning("–ú–æ–¥–µ–ª—å CatBoost –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML4 (Bagging)
    try:
        models['Bagging'] = pickle.load(open('models/model_ml4.pkl', 'rb'))
    except:
        st.warning("–ú–æ–¥–µ–ª—å Bagging –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ML5 (Stacking)
    try:
        models['Stacking'] = pickle.load(open('models/model_ml5.pkl', 'rb'))
    except:
        st.warning("–ú–æ–¥–µ–ª—å Stacking –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return models

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        return pd.read_csv('data/EDA_regression.csv')
    except:
        st.error("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'data/EDA_regression.csv' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return None

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
    ["–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ", "–û –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
data = load_data()
models = load_models()

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
if page == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ":
    st.title("–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ")
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
        try:
            image = Image.open('developer_photo.jpg')
            st.image(image, caption="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        except:
            st.info("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–æ—Ç–æ 'developer_photo.jpg' –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞.")
    
    with col2:
        st.markdown("""
        ### –§–ò–û
        –§–µ–ª—å–¥–µ –°–µ—Ä–≥–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á
        
        ### –ù–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã
        –§–ò–¢-231
        
        ### –¢–µ–º–∞ –†–ì–†
        –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–∞—à–±–æ—Ä–¥–∞)
        –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–µ–π ML –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

        """)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –û –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
elif page == "–û –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö":
    st.title("–û –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
    
    if data is not None:
        st.header("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
        st.markdown("""
        –î–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤. –¶–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —è–≤–ª—è–µ—Ç—Å—è `price` - —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞.
        
        ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞–ª–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        
        ### –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """)
        st.markdown("""
        - `price` ‚Äî —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê
        - `carat` ‚Äî –≤–µ—Å –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞ –≤ –∫–∞—Ä–∞—Ç–∞—Ö
        - `cut` ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∫–∏
        - `color` ‚Äî —Ü–≤–µ—Ç –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞
        - `clarity` ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç–∞
        - `x` ‚Äî –¥–ª–∏–Ω–∞ –≤ –º–º
        - `y` ‚Äî —à–∏—Ä–∏–Ω–∞ –≤ –º–º
        - `z` ‚Äî –≥–ª—É–±–∏–Ω–∞ –≤ –º–º
        - `depth` ‚Äî –æ–±—â–∞—è –≥–ª—É–±–∏–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö z / mean(x, y) = 2 * z / (x + y)
        - `table` ‚Äî —à–∏—Ä–∏–Ω–∞ –≤–µ—Ä—à–∏–Ω—ã –∞–ª–º–∞–∑–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —Ç–æ—á–∫–∏
        """)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        features_description = pd.DataFrame({
            '–ü—Ä–∏–∑–Ω–∞–∫': data.columns,
            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data.dtypes.astype(str),
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π': data.count().values,
            '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ': [round(data[col].mean(), 2) if pd.api.types.is_numeric_dtype(data[col]) else '-' for col in data.columns],
            '–ú–∏–Ω–∏–º—É–º': [round(data[col].min(), 2) if pd.api.types.is_numeric_dtype(data[col]) else '-' for col in data.columns],
            '–ú–∞–∫—Å–∏–º—É–º': [round(data[col].max(), 2) if pd.api.types.is_numeric_dtype(data[col]) else '-' for col in data.columns]
        })
        
        st.dataframe(features_description)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
        st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.markdown(f"""
        - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤**: {data.shape[0]}
        - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤**: {data.shape[1] - 1} (–Ω–µ —Å—á–∏—Ç–∞—è —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
        - **–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞**: {data.memory_usage().sum() / 1024 / 1024:.2f} –ú–ë
        """)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
        st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(data.head())

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
elif page == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
    st.title("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    if data is not None:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8-whitegrid')
        sns.set_palette('Set2')
        
        st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (price)")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(data['price'], kde=True, ax=ax)
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω')
        ax.set_xlabel('–¶–µ–Ω–∞')
        ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        st.pyplot(fig)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 2: –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è –∏ –ª–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        st.header("–í–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        
        numeric_cols = data.select_dtypes(include=[np.number]).columns.tolist()
        numeric_cols.remove('price') if 'price' in numeric_cols else None
        
        col1, col2 = st.columns(2)
        
        with col1:
            feature1 = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:', numeric_cols, index=0)
        
        with col2:
            feature2 = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:', numeric_cols, index=min(1, len(numeric_cols)-1))
        
        fig, ax = plt.subplots(1, 2, figsize=(15, 6))
        
        # Scatter plot –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        sns.regplot(x=feature1, y='price', data=data, ax=ax[0])
        ax[0].set_title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç {feature1}')
        ax[0].set_xlabel(feature1)
        ax[0].set_ylabel('–¶–µ–Ω–∞')
        
        # Scatter plot –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
        sns.regplot(x=feature2, y='price', data=data, ax=ax[1])
        ax[1].set_title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç {feature2}')
        ax[1].set_xlabel(feature2)
        ax[1].set_ylabel('–¶–µ–Ω–∞')
        
        st.pyplot(fig)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        st.header("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        
        corr = data.select_dtypes(include=[np.number]).corr()
        
        fig, ax = plt.subplots(figsize=(12, 10))
        sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', ax=ax)
        ax.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏')
        st.pyplot(fig)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 4: –Ø—â–∏–∫ —Å —É—Å–∞–º–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.header("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Box Plot)")
        
        fig, ax = plt.subplots(figsize=(15, 10))
        sns.boxplot(data=data[numeric_cols], ax=ax)
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
        ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
        st.pyplot(fig)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: –ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        st.header("–ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ (Pairplot)")
        
        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        selected_features = st.multiselect(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5):',
            numeric_cols,
            default=numeric_cols[:min(4, len(numeric_cols))]
        )
        
        if len(selected_features) > 0:
            selected_features.append('price')
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            sample_size = min(1000, len(data))
            data_sample = data.sample(sample_size, random_state=42)
            
            fig = sns.pairplot(data_sample[selected_features], diag_kind='kde', height=2.5)
            fig.fig.suptitle('–ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤', y=1.02)
            st.pyplot(fig.fig)
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
elif page == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    st.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π ML")
    st.markdown("""
    ### –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    
    –í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:
    
    1. **ElasticNet** - –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π L1 –∏ L2
    2. **GradientBoostingRegressor** - –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥
    3. **CatBoostRegressor** - –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥
    4. **BaggingRegressor** - –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –±—ç–≥–≥–∏–Ω–≥
    5. **StackingRegressor** - –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    """)
    if data is not None and models:
        st.header("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        input_method = st.radio(
            "–ú–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
            ["–†—É—á–Ω–æ–π –≤–≤–æ–¥", "–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞"]
        )
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        model_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
            list(models.keys())
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–±–µ–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)
        features = data.drop('price', axis=1).columns.tolist()
        
        if input_method == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
            st.header("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            input_values = {}
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            col1, col2 = st.columns(2)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –¥–≤—É–º –∫–æ–ª–æ–Ω–∫–∞–º
            half_features = len(features) // 2
            
            for i, feature in enumerate(features):
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞
                if feature not in ['cut', 'color', 'clarity']:
                    min_val = float(data[feature].min())
                    max_val = float(data[feature].max())
                    mean_val = float(data[feature].mean())
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π 
                    step = (max_val - min_val) / 100.0
                    
                    # –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π
                    if i < half_features:
                        with col1:
                            if max_val - min_val <= 10:  # –ù–µ–±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                input_values[feature] = st.slider(
                                    f"{feature}:", min_val, max_val, mean_val, step=step
                                )
                            else:  # –ë–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                input_values[feature] = st.number_input(
                                    f"{feature}:", min_val, max_val, mean_val, step=step
                                )
                    else:
                        with col2:
                            if max_val - min_val <= 10:  # –ù–µ–±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                input_values[feature] = st.slider(
                                    f"{feature}:", min_val, max_val, mean_val, step=step
                                )
                            else:  # –ë–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                                input_values[feature] = st.number_input(
                                    f"{feature}:", min_val, max_val, mean_val, step=step
                                )
                else:
                    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (cut, color, clarity) –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                    if feature in ['cut', 'color', 'clarity']:
                        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
                        if feature == 'cut':
                            options = list(range(1, 6))  # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5
                            default_idx = 2  # –ò–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 3
                        elif feature == 'color':
                            options = list(range(1, 8))  # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 7
                            default_idx = 3  # –ò–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 4
                        elif feature == 'clarity':
                            options = list(range(1, 9))  # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 8
                            default_idx = 3  # –ò–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è 4
                        
                        if i < half_features:
                            with col1:
                                input_values[feature] = st.selectbox(
                                    f"{feature} (–±–æ–ª—å—à–µ - –ª—É—á—à–µ):",
                                    options=options,
                                    index=default_idx
                                )
                        else:
                            with col2:
                                input_values[feature] = st.selectbox(
                                    f"{feature} (–±–æ–ª—å—à–µ - –ª—É—á—à–µ):",
                                    options=options,
                                    index=default_idx
                                )
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        unique_values = data[feature].unique().tolist()
                        
                        if i < half_features:
                            with col1:
                                input_values[feature] = st.selectbox(
                                    f"{feature}:", unique_values
                                )
                        else:
                            with col2:
                                input_values[feature] = st.selectbox(
                                    f"{feature}:", unique_values
                                )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            input_df = pd.DataFrame([input_values])
            
        else:  # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
            st.header("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
            st.markdown("""
            CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ –∂–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —á—Ç–æ –∏ –æ–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π).
            """)
            
            uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
            
            if uploaded_file is not None:
                try:
                    input_df = pd.read_csv(uploaded_file)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    missing_features = set(features) - set(input_df.columns)
                    if missing_features:
                        st.error(f"–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(missing_features)}")
                        input_df = None
                    else:
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                        st.dataframe(input_df.head())
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                    input_df = None
            else:
                input_df = None
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if input_df is not None and st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                model = models[model_name]
                prediction = model.predict(input_df)
                
                st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                
                # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                if len(prediction) == 1:
                    st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {prediction[0]:,.2f} USD")
                    st.info("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–µ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")
                else:
                    # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    result_df = pd.DataFrame({
                        '–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏': range(1, len(prediction) + 1),
                        '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞': [f"{price:,.2f} USD" for price in prediction]
                    })
                    st.dataframe(result_df)
                    
                    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.histplot(prediction, kde=True, ax=ax)
                    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω')
                    ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞')
                    ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                    st.pyplot(fig)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
    else:
        if data is None:
            st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        if not models:
            st.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# –ü–æ–¥–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown("---")
st.markdown("¬© 2025 ML Models Dashboard | –†–∞—Å—á–µ—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ | –û–ú–ì–¢–£")
